from _typeshed import Incomplete
from grako.buffering import Buffer
from grako.parsing import Parser

KEYWORDS: Incomplete

class DisplayPatternBuffer(Buffer):
    def __init__(self, text, whitespace: Incomplete | None = ..., nameguard: Incomplete | None = ..., comments_re: Incomplete | None = ..., eol_comments_re: Incomplete | None = ..., ignorecase: Incomplete | None = ..., namechars: str = ..., **kwargs) -> None: ...

class DisplayPatternParser(Parser):
    def __init__(self, whitespace: Incomplete | None = ..., nameguard: Incomplete | None = ..., comments_re: Incomplete | None = ..., eol_comments_re: Incomplete | None = ..., ignorecase: Incomplete | None = ..., left_recursion: bool = ..., parseinfo: bool = ..., keywords: Incomplete | None = ..., namechars: str = ..., buffer_class=..., **kwargs) -> None: ...

class DisplayPatternSemantics:
    def start(self, ast): ...
    def pattern(self, ast): ...
    def tag(self, ast): ...
    def function(self, ast): ...
    def parameter(self, ast): ...
    def text(self, ast): ...
    def string(self, ast): ...

def main(filename, startrule, **kwargs): ...
