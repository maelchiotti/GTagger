from . import ID3_DEFAULT_VERSION as ID3_DEFAULT_VERSION, isValidVersion as isValidVersion, normalizeVersion as normalizeVersion
from .. import core as core
from ..utils import requireBytes as requireBytes
from ..utils.binfuncs import bin2bytes as bin2bytes, bin2dec as bin2dec, bin2synchsafe as bin2synchsafe, bytes2bin as bytes2bin, dec2bin as dec2bin
from ..utils.log import getLogger as getLogger
from _typeshed import Incomplete

log: Incomplete
NULL_FRAME_FLAGS: Incomplete

class TagHeader:
    SIZE: int
    def __init__(self, version=...) -> None: ...
    tag_size: int
    unsync: bool
    extended: bool
    experimental: bool
    footer: bool
    def clear(self) -> None: ...
    @property
    def version(self): ...
    @version.setter
    def version(self, v) -> None: ...
    @property
    def major_version(self): ...
    @property
    def minor_version(self): ...
    @property
    def rev_version(self): ...
    def parse(self, f): ...
    def render(self, tag_len: Incomplete | None = ...): ...

class ExtendedTagHeader:
    RESTRICT_TAG_SZ_LARGE: int
    RESTRICT_TAG_SZ_MED: int
    RESTRICT_TAG_SZ_SMALL: int
    RESTRICT_TAG_SZ_TINY: int
    RESTRICT_TEXT_ENC_NONE: int
    RESTRICT_TEXT_ENC_UTF8: int
    RESTRICT_TEXT_LEN_NONE: int
    RESTRICT_TEXT_LEN_1024: int
    RESTRICT_TEXT_LEN_128: int
    RESTRICT_TEXT_LEN_30: int
    RESTRICT_IMG_ENC_NONE: int
    RESTRICT_IMG_ENC_PNG_JPG: int
    RESTRICT_IMG_SZ_NONE: int
    RESTRICT_IMG_SZ_256: int
    RESTRICT_IMG_SZ_64: int
    RESTRICT_IMG_SZ_64_EXACT: int
    size: int
    def __init__(self) -> None: ...
    @property
    def update_bit(self): ...
    @update_bit.setter
    def update_bit(self, v) -> None: ...
    @property
    def crc_bit(self): ...
    @crc_bit.setter
    def crc_bit(self, v) -> None: ...
    @property
    def crc(self): ...
    @crc.setter
    def crc(self, v) -> None: ...
    @property
    def restrictions_bit(self): ...
    @restrictions_bit.setter
    def restrictions_bit(self, v) -> None: ...
    @property
    def tag_size_restriction(self): ...
    @tag_size_restriction.setter
    def tag_size_restriction(self, v) -> None: ...
    @property
    def tag_size_restriction_description(self): ...
    @property
    def text_enc_restriction(self): ...
    @text_enc_restriction.setter
    def text_enc_restriction(self, v) -> None: ...
    @property
    def text_enc_restriction_description(self): ...
    @property
    def text_length_restriction(self): ...
    @text_length_restriction.setter
    def text_length_restriction(self, v) -> None: ...
    @property
    def text_length_restriction_description(self): ...
    @property
    def image_enc_restriction(self): ...
    @image_enc_restriction.setter
    def image_enc_restriction(self, v) -> None: ...
    @property
    def image_enc_restriction_description(self): ...
    @property
    def image_size_restriction(self): ...
    @image_size_restriction.setter
    def image_size_restriction(self, v) -> None: ...
    @property
    def image_size_restriction_description(self): ...
    def render(self, version, frame_data, padding: int = ...): ...
    def parse(self, fp, version) -> None: ...

class FrameHeader:
    TAG_ALTER: Incomplete
    FILE_ALTER: Incomplete
    READ_ONLY: Incomplete
    COMPRESSED: Incomplete
    ENCRYPTED: Incomplete
    GROUPED: Incomplete
    UNSYNC: Incomplete
    DATA_LEN: Incomplete
    size: Incomplete
    id: Incomplete
    data_size: int
    def __init__(self, fid, version) -> None: ...
    def copyFlags(self, rhs) -> None: ...
    @property
    def major_version(self): ...
    @property
    def minor_version(self): ...
    @property
    def version(self): ...
    @property
    def tag_alter(self): ...
    @tag_alter.setter
    def tag_alter(self, b) -> None: ...
    @property
    def file_alter(self): ...
    @file_alter.setter
    def file_alter(self, b) -> None: ...
    @property
    def read_only(self): ...
    @read_only.setter
    def read_only(self, b) -> None: ...
    @property
    def compressed(self): ...
    @compressed.setter
    def compressed(self, b) -> None: ...
    @property
    def encrypted(self): ...
    @encrypted.setter
    def encrypted(self, b) -> None: ...
    @property
    def grouped(self): ...
    @grouped.setter
    def grouped(self, b) -> None: ...
    @property
    def unsync(self): ...
    @unsync.setter
    def unsync(self, b) -> None: ...
    @property
    def data_length_indicator(self): ...
    @data_length_indicator.setter
    def data_length_indicator(self, b) -> None: ...
    def render(self, data_size): ...
    @staticmethod
    def parse(f, version): ...
