import argparse
from _typeshed import Incomplete

os_walk: Incomplete

def os_walk_unpack(w): ...

log: Incomplete

def guessMimetype(filename, with_encoding: bool = ...): ...
def walk(handler, path, excludes: Incomplete | None = ..., fs_encoding=..., recursive: bool = ...): ...

class FileHandler:
    def handleFile(self, f) -> None: ...
    def handleDirectory(self, d, files) -> None: ...
    def handleDone(self) -> None: ...

def requireUnicode(*args): ...
def requireBytes(*args): ...
def formatTime(seconds, total: Incomplete | None = ..., short: bool = ...): ...

KB_BYTES: int
MB_BYTES: int
GB_BYTES: int
KB_UNIT: str
MB_UNIT: str
GB_UNIT: str

def formatSize(size, short: bool = ...): ...
def formatTimeDelta(td): ...
def chunkCopy(src_fp, dest_fp, chunk_sz=...) -> None: ...

class ArgumentParser(argparse.ArgumentParser):
    log_levels: Incomplete
    def __init__(self, *args, **kwargs): ...
    def parse_args(self, *args, **kwargs): ...

class LoggingAction(argparse._AppendAction):
    main_logger: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, parser, namespace, values, option_string: Incomplete | None = ...) -> None: ...

def datePicker(thing, prefer_recording_date: bool = ...): ...
def makeUniqueFileName(file_path, uniq: str = ...): ...
def b(x, encoder: Incomplete | None = ...): ...
