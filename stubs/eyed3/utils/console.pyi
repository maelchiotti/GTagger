from . import formatSize as formatSize, formatTime as formatTime
from _typeshed import Incomplete

class AnsiCodes:
    def __init__(self, codes): ...
    def __getattribute__(self, name): ...
    def __getitem__(self, name): ...
    @classmethod
    def init(cls, allow_colors) -> None: ...

class AnsiFore:
    GREY: int
    RED: int
    GREEN: int
    YELLOW: int
    BLUE: int
    MAGENTA: int
    CYAN: int
    WHITE: int
    RESET: int

class AnsiBack:
    GREY: int
    RED: int
    GREEN: int
    YELLOW: int
    BLUE: int
    MAGENTA: int
    CYAN: int
    WHITE: int
    RESET: int

class AnsiStyle:
    RESET_ALL: int
    BRIGHT: int
    RESET_BRIGHT: int
    DIM: int
    RESET_DIM: Incomplete
    ITALICS: int
    RESET_ITALICS: int
    UNDERLINE: int
    RESET_UNDERLINE: int
    BLINK_SLOW: int
    RESET_BLINK_SLOW: int
    BLINK_FAST: int
    RESET_BLINK_FAST: int
    INVERSE: int
    RESET_INVERSE: int
    STRIKE_THRU: int
    RESET_STRIKE_THRU: int

Fore: Incomplete
Back: Incomplete
Style: Incomplete

def ERROR_COLOR(): ...
def WARNING_COLOR(): ...
def HEADER_COLOR(): ...

class Spinner:
    def __init__(self, msg, file: Incomplete | None = ..., step: int = ..., chars: Incomplete | None = ..., use_unicode: bool = ..., print_done: bool = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...

class ProgressBar:
    def __init__(self, total_or_items, file: Incomplete | None = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def __iter__(self): ...
    def next(self): ...
    def update(self, value: Incomplete | None = ...) -> None: ...
    @classmethod
    def map(cls, function, items, multiprocess: bool = ..., file: Incomplete | None = ...): ...

def printMsg(s) -> None: ...
def printError(s) -> None: ...
def printWarning(s) -> None: ...
def printHeader(s) -> None: ...
def boldText(s, c: Incomplete | None = ...): ...
def formatText(s, b: bool = ..., c: Incomplete | None = ...): ...
def cformat(msg, fg, bg: Incomplete | None = ..., styles: Incomplete | None = ...): ...
def getTtySize(fd=..., check_tty: bool = ...): ...
def cprint(msg, fg, bg: Incomplete | None = ..., styles: Incomplete | None = ..., file=...) -> None: ...
