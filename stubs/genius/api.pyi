from _typeshed import Incomplete
from enum import Enum
from genius.classes import Artist as Artist, Song as Song
from genius.exceptions import APIException as APIException
from typing import Any, Dict, Iterator, List, Optional

class SortingKeys(str, Enum):
    POPULARITY: str
    TITLE: str

class API:
    BASE_URL: str
    access_token: Incomplete
    verbose: Incomplete
    def __init__(self, access_token: str, verbose: bool = ...) -> None: ...
    def __call__(self, service: str, **params) -> Dict[str, Any]: ...
    def get_song(self, song_id: int) -> Optional[Dict]: ...
    def get_artist(self, artist_id: int) -> Optional[Dict]: ...
    def get_artist_songs(self, artist_id: int, page: int = ..., per_page: int = ..., sort: str = ...) -> List[Dict]: ...
    def search(self, text: str, page: int = ..., per_page: int = ...) -> Iterator[Dict]: ...

class Genius:
    api: Incomplete
    def __init__(self, access_token: str, verbose: bool = ...) -> None: ...
    def get_song(self, song_id: int) -> Song: ...
    def get_artist(self, artist_id: int) -> Artist: ...
    def get_artist_songs(self, artist_id: int, page: int = ..., per_page: int = ..., sort: str = ...) -> Iterator[Song]: ...
    def get_all_artist_songs(self, artist_id: int, sort: str = ...) -> Iterator[Song]: ...
    def search(self, text: str, page: int = ..., per_page: int = ...) -> Iterator[Song]: ...
    def search_all(self, text: str, page_limit: int = ...) -> Iterator[Song]: ...
    def search_artist(self, name: str) -> Optional[Artist]: ...
