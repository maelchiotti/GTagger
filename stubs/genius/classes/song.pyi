from .album import Album as Album
from .artist import Artist as Artist
from .commons import Base as Base
from .media import Media as Media
from _typeshed import Incomplete
from datetime import datetime
from genius.scraper import get_lyrics as get_lyrics
from typing import Dict, List

def lazy_property(prop): ...

class Song(Base):
    id: Incomplete
    artist: Incomplete
    hot: Incomplete
    pageviews: Incomplete
    song_art_image_url: Incomplete
    title: Incomplete
    title_with_featured: Incomplete
    url: Incomplete
    def __init__(self, genius, data) -> None: ...
    def __init_extra_data__(self, data): ...
    def description(self) -> str: ...
    def recording_location(self) -> str: ...
    def release_date(self) -> datetime: ...
    def release_date_for_display(self) -> str: ...
    def album(self) -> Album: ...
    def media(self) -> Dict[str, Media]: ...
    def features(self) -> List['Artist']: ...
    def producers(self) -> List['Artist']: ...
    def writers(self) -> List['Artist']: ...
    def samples(self) -> List['Song']: ...
    def sampled_in(self) -> List['Song']: ...
    def interpolates(self) -> List['Song']: ...
    def interpolated_by(self) -> List['Song']: ...
    def cover_of(self) -> List['Song']: ...
    def covered_by(self) -> List['Song']: ...
    def remix_of(self) -> List['Song']: ...
    def remixed_by(self) -> List['Song']: ...
    def live_version_of(self) -> List['Song']: ...
    def performed_live_as(self) -> List['Song']: ...
    @property
    def is_cover(self): ...
    @property
    def is_live(self): ...
    @property
    def is_remix(self): ...
    @property
    def lyrics(self) -> List[str]: ...
