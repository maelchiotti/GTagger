from .api import API as API, PublicAPI as PublicAPI
from .types import Album as Album, Artist as Artist, Song as Song, Track as Track
from .utils import clean_str as clean_str, safe_unicode as safe_unicode
from _typeshed import Incomplete

class Genius(API, PublicAPI):
    default_terms: Incomplete
    verbose: Incomplete
    remove_section_headers: Incomplete
    skip_non_songs: Incomplete
    excluded_terms: Incomplete
    def __init__(self, access_token: Incomplete | None = ..., response_format: str = ..., timeout: int = ..., sleep_time: float = ..., verbose: bool = ..., remove_section_headers: bool = ..., skip_non_songs: bool = ..., excluded_terms: Incomplete | None = ..., replace_default_terms: bool = ..., retries: int = ...) -> None: ...
    def lyrics(self, song_id: Incomplete | None = ..., song_url: Incomplete | None = ..., remove_section_headers: bool = ...): ...
    def song_annotations(self, song_id, text_format: Incomplete | None = ...): ...
    def search_album(self, name: Incomplete | None = ..., artist: str = ..., album_id: Incomplete | None = ..., get_full_info: bool = ..., text_format: Incomplete | None = ...): ...
    def search_song(self, title: Incomplete | None = ..., artist: str = ..., song_id: Incomplete | None = ..., get_full_info: bool = ...): ...
    def search_artist(self, artist_name, max_songs: Incomplete | None = ..., sort: str = ..., per_page: int = ..., get_full_info: bool = ..., allow_name_change: bool = ..., artist_id: Incomplete | None = ..., include_features: bool = ...): ...
    def save_artists(self, artists, filename: str = ..., overwrite: bool = ..., ensure_ascii: bool = ...) -> None: ...
    def tag(self, name, page: Incomplete | None = ...): ...
